/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChatGptResponseService } from "../chatGptResponse.service";
import { ChatGptResponseCreateInput } from "./ChatGptResponseCreateInput";
import { ChatGptResponse } from "./ChatGptResponse";
import { ChatGptResponseFindManyArgs } from "./ChatGptResponseFindManyArgs";
import { ChatGptResponseWhereUniqueInput } from "./ChatGptResponseWhereUniqueInput";
import { ChatGptResponseUpdateInput } from "./ChatGptResponseUpdateInput";

export class ChatGptResponseControllerBase {
  constructor(protected readonly service: ChatGptResponseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChatGptResponse })
  async createChatGptResponse(
    @common.Body() data: ChatGptResponseCreateInput
  ): Promise<ChatGptResponse> {
    return await this.service.createChatGptResponse({
      data: data,
      select: {
        createdAt: true,
        id: true,
        requestId: true,
        responseText: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ChatGptResponse] })
  @ApiNestedQuery(ChatGptResponseFindManyArgs)
  async chatGptResponses(
    @common.Req() request: Request
  ): Promise<ChatGptResponse[]> {
    const args = plainToClass(ChatGptResponseFindManyArgs, request.query);
    return this.service.chatGptResponses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        requestId: true,
        responseText: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChatGptResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async chatGptResponse(
    @common.Param() params: ChatGptResponseWhereUniqueInput
  ): Promise<ChatGptResponse | null> {
    const result = await this.service.chatGptResponse({
      where: params,
      select: {
        createdAt: true,
        id: true,
        requestId: true,
        responseText: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChatGptResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChatGptResponse(
    @common.Param() params: ChatGptResponseWhereUniqueInput,
    @common.Body() data: ChatGptResponseUpdateInput
  ): Promise<ChatGptResponse | null> {
    try {
      return await this.service.updateChatGptResponse({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          requestId: true,
          responseText: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChatGptResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChatGptResponse(
    @common.Param() params: ChatGptResponseWhereUniqueInput
  ): Promise<ChatGptResponse | null> {
    try {
      return await this.service.deleteChatGptResponse({
        where: params,
        select: {
          createdAt: true,
          id: true,
          requestId: true,
          responseText: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
