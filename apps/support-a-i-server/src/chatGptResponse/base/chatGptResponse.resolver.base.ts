/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ChatGptResponse } from "./ChatGptResponse";
import { ChatGptResponseCountArgs } from "./ChatGptResponseCountArgs";
import { ChatGptResponseFindManyArgs } from "./ChatGptResponseFindManyArgs";
import { ChatGptResponseFindUniqueArgs } from "./ChatGptResponseFindUniqueArgs";
import { CreateChatGptResponseArgs } from "./CreateChatGptResponseArgs";
import { UpdateChatGptResponseArgs } from "./UpdateChatGptResponseArgs";
import { DeleteChatGptResponseArgs } from "./DeleteChatGptResponseArgs";
import { ChatGptResponseService } from "../chatGptResponse.service";
@graphql.Resolver(() => ChatGptResponse)
export class ChatGptResponseResolverBase {
  constructor(protected readonly service: ChatGptResponseService) {}

  async _chatGptResponsesMeta(
    @graphql.Args() args: ChatGptResponseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ChatGptResponse])
  async chatGptResponses(
    @graphql.Args() args: ChatGptResponseFindManyArgs
  ): Promise<ChatGptResponse[]> {
    return this.service.chatGptResponses(args);
  }

  @graphql.Query(() => ChatGptResponse, { nullable: true })
  async chatGptResponse(
    @graphql.Args() args: ChatGptResponseFindUniqueArgs
  ): Promise<ChatGptResponse | null> {
    const result = await this.service.chatGptResponse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ChatGptResponse)
  async createChatGptResponse(
    @graphql.Args() args: CreateChatGptResponseArgs
  ): Promise<ChatGptResponse> {
    return await this.service.createChatGptResponse({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ChatGptResponse)
  async updateChatGptResponse(
    @graphql.Args() args: UpdateChatGptResponseArgs
  ): Promise<ChatGptResponse | null> {
    try {
      return await this.service.updateChatGptResponse({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChatGptResponse)
  async deleteChatGptResponse(
    @graphql.Args() args: DeleteChatGptResponseArgs
  ): Promise<ChatGptResponse | null> {
    try {
      return await this.service.deleteChatGptResponse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
