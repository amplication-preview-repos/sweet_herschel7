/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ChatGptResponse as PrismaChatGptResponse,
} from "@prisma/client";

export class ChatGptResponseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChatGptResponseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.chatGptResponse.count(args);
  }

  async chatGptResponses(
    args: Prisma.ChatGptResponseFindManyArgs
  ): Promise<PrismaChatGptResponse[]> {
    return this.prisma.chatGptResponse.findMany(args);
  }
  async chatGptResponse(
    args: Prisma.ChatGptResponseFindUniqueArgs
  ): Promise<PrismaChatGptResponse | null> {
    return this.prisma.chatGptResponse.findUnique(args);
  }
  async createChatGptResponse(
    args: Prisma.ChatGptResponseCreateArgs
  ): Promise<PrismaChatGptResponse> {
    return this.prisma.chatGptResponse.create(args);
  }
  async updateChatGptResponse(
    args: Prisma.ChatGptResponseUpdateArgs
  ): Promise<PrismaChatGptResponse> {
    return this.prisma.chatGptResponse.update(args);
  }
  async deleteChatGptResponse(
    args: Prisma.ChatGptResponseDeleteArgs
  ): Promise<PrismaChatGptResponse> {
    return this.prisma.chatGptResponse.delete(args);
  }
}
