/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { Bitrix24IntegrationService } from "../bitrix24Integration.service";
import { Bitrix24IntegrationCreateInput } from "./Bitrix24IntegrationCreateInput";
import { Bitrix24Integration } from "./Bitrix24Integration";
import { Bitrix24IntegrationFindManyArgs } from "./Bitrix24IntegrationFindManyArgs";
import { Bitrix24IntegrationWhereUniqueInput } from "./Bitrix24IntegrationWhereUniqueInput";
import { Bitrix24IntegrationUpdateInput } from "./Bitrix24IntegrationUpdateInput";

export class Bitrix24IntegrationControllerBase {
  constructor(protected readonly service: Bitrix24IntegrationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bitrix24Integration })
  async createBitrix24Integration(
    @common.Body() data: Bitrix24IntegrationCreateInput
  ): Promise<Bitrix24Integration> {
    return await this.service.createBitrix24Integration({
      data: data,
      select: {
        apiEndpoint: true,
        authorizationKey: true,
        createdAt: true,
        id: true,
        integrationName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bitrix24Integration] })
  @ApiNestedQuery(Bitrix24IntegrationFindManyArgs)
  async bitrix24Integrations(
    @common.Req() request: Request
  ): Promise<Bitrix24Integration[]> {
    const args = plainToClass(Bitrix24IntegrationFindManyArgs, request.query);
    return this.service.bitrix24Integrations({
      ...args,
      select: {
        apiEndpoint: true,
        authorizationKey: true,
        createdAt: true,
        id: true,
        integrationName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bitrix24Integration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bitrix24Integration(
    @common.Param() params: Bitrix24IntegrationWhereUniqueInput
  ): Promise<Bitrix24Integration | null> {
    const result = await this.service.bitrix24Integration({
      where: params,
      select: {
        apiEndpoint: true,
        authorizationKey: true,
        createdAt: true,
        id: true,
        integrationName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bitrix24Integration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBitrix24Integration(
    @common.Param() params: Bitrix24IntegrationWhereUniqueInput,
    @common.Body() data: Bitrix24IntegrationUpdateInput
  ): Promise<Bitrix24Integration | null> {
    try {
      return await this.service.updateBitrix24Integration({
        where: params,
        data: data,
        select: {
          apiEndpoint: true,
          authorizationKey: true,
          createdAt: true,
          id: true,
          integrationName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bitrix24Integration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBitrix24Integration(
    @common.Param() params: Bitrix24IntegrationWhereUniqueInput
  ): Promise<Bitrix24Integration | null> {
    try {
      return await this.service.deleteBitrix24Integration({
        where: params,
        select: {
          apiEndpoint: true,
          authorizationKey: true,
          createdAt: true,
          id: true,
          integrationName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
