/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bitrix24Integration } from "./Bitrix24Integration";
import { Bitrix24IntegrationCountArgs } from "./Bitrix24IntegrationCountArgs";
import { Bitrix24IntegrationFindManyArgs } from "./Bitrix24IntegrationFindManyArgs";
import { Bitrix24IntegrationFindUniqueArgs } from "./Bitrix24IntegrationFindUniqueArgs";
import { CreateBitrix24IntegrationArgs } from "./CreateBitrix24IntegrationArgs";
import { UpdateBitrix24IntegrationArgs } from "./UpdateBitrix24IntegrationArgs";
import { DeleteBitrix24IntegrationArgs } from "./DeleteBitrix24IntegrationArgs";
import { Bitrix24IntegrationService } from "../bitrix24Integration.service";
@graphql.Resolver(() => Bitrix24Integration)
export class Bitrix24IntegrationResolverBase {
  constructor(protected readonly service: Bitrix24IntegrationService) {}

  async _bitrix24IntegrationsMeta(
    @graphql.Args() args: Bitrix24IntegrationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bitrix24Integration])
  async bitrix24Integrations(
    @graphql.Args() args: Bitrix24IntegrationFindManyArgs
  ): Promise<Bitrix24Integration[]> {
    return this.service.bitrix24Integrations(args);
  }

  @graphql.Query(() => Bitrix24Integration, { nullable: true })
  async bitrix24Integration(
    @graphql.Args() args: Bitrix24IntegrationFindUniqueArgs
  ): Promise<Bitrix24Integration | null> {
    const result = await this.service.bitrix24Integration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bitrix24Integration)
  async createBitrix24Integration(
    @graphql.Args() args: CreateBitrix24IntegrationArgs
  ): Promise<Bitrix24Integration> {
    return await this.service.createBitrix24Integration({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Bitrix24Integration)
  async updateBitrix24Integration(
    @graphql.Args() args: UpdateBitrix24IntegrationArgs
  ): Promise<Bitrix24Integration | null> {
    try {
      return await this.service.updateBitrix24Integration({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bitrix24Integration)
  async deleteBitrix24Integration(
    @graphql.Args() args: DeleteBitrix24IntegrationArgs
  ): Promise<Bitrix24Integration | null> {
    try {
      return await this.service.deleteBitrix24Integration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
