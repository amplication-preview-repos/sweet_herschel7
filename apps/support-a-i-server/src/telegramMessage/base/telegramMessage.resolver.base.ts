/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TelegramMessage } from "./TelegramMessage";
import { TelegramMessageCountArgs } from "./TelegramMessageCountArgs";
import { TelegramMessageFindManyArgs } from "./TelegramMessageFindManyArgs";
import { TelegramMessageFindUniqueArgs } from "./TelegramMessageFindUniqueArgs";
import { CreateTelegramMessageArgs } from "./CreateTelegramMessageArgs";
import { UpdateTelegramMessageArgs } from "./UpdateTelegramMessageArgs";
import { DeleteTelegramMessageArgs } from "./DeleteTelegramMessageArgs";
import { TelegramMessageService } from "../telegramMessage.service";
@graphql.Resolver(() => TelegramMessage)
export class TelegramMessageResolverBase {
  constructor(protected readonly service: TelegramMessageService) {}

  async _telegramMessagesMeta(
    @graphql.Args() args: TelegramMessageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TelegramMessage])
  async telegramMessages(
    @graphql.Args() args: TelegramMessageFindManyArgs
  ): Promise<TelegramMessage[]> {
    return this.service.telegramMessages(args);
  }

  @graphql.Query(() => TelegramMessage, { nullable: true })
  async telegramMessage(
    @graphql.Args() args: TelegramMessageFindUniqueArgs
  ): Promise<TelegramMessage | null> {
    const result = await this.service.telegramMessage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TelegramMessage)
  async createTelegramMessage(
    @graphql.Args() args: CreateTelegramMessageArgs
  ): Promise<TelegramMessage> {
    return await this.service.createTelegramMessage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TelegramMessage)
  async updateTelegramMessage(
    @graphql.Args() args: UpdateTelegramMessageArgs
  ): Promise<TelegramMessage | null> {
    try {
      return await this.service.updateTelegramMessage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TelegramMessage)
  async deleteTelegramMessage(
    @graphql.Args() args: DeleteTelegramMessageArgs
  ): Promise<TelegramMessage | null> {
    try {
      return await this.service.deleteTelegramMessage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
