/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TelegramMessage as PrismaTelegramMessage,
} from "@prisma/client";

export class TelegramMessageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TelegramMessageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.telegramMessage.count(args);
  }

  async telegramMessages(
    args: Prisma.TelegramMessageFindManyArgs
  ): Promise<PrismaTelegramMessage[]> {
    return this.prisma.telegramMessage.findMany(args);
  }
  async telegramMessage(
    args: Prisma.TelegramMessageFindUniqueArgs
  ): Promise<PrismaTelegramMessage | null> {
    return this.prisma.telegramMessage.findUnique(args);
  }
  async createTelegramMessage(
    args: Prisma.TelegramMessageCreateArgs
  ): Promise<PrismaTelegramMessage> {
    return this.prisma.telegramMessage.create(args);
  }
  async updateTelegramMessage(
    args: Prisma.TelegramMessageUpdateArgs
  ): Promise<PrismaTelegramMessage> {
    return this.prisma.telegramMessage.update(args);
  }
  async deleteTelegramMessage(
    args: Prisma.TelegramMessageDeleteArgs
  ): Promise<PrismaTelegramMessage> {
    return this.prisma.telegramMessage.delete(args);
  }
}
