/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TelegramMessageService } from "../telegramMessage.service";
import { TelegramMessageCreateInput } from "./TelegramMessageCreateInput";
import { TelegramMessage } from "./TelegramMessage";
import { TelegramMessageFindManyArgs } from "./TelegramMessageFindManyArgs";
import { TelegramMessageWhereUniqueInput } from "./TelegramMessageWhereUniqueInput";
import { TelegramMessageUpdateInput } from "./TelegramMessageUpdateInput";

export class TelegramMessageControllerBase {
  constructor(protected readonly service: TelegramMessageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TelegramMessage })
  async createTelegramMessage(
    @common.Body() data: TelegramMessageCreateInput
  ): Promise<TelegramMessage> {
    return await this.service.createTelegramMessage({
      data: data,
      select: {
        createdAt: true,
        id: true,
        messageText: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TelegramMessage] })
  @ApiNestedQuery(TelegramMessageFindManyArgs)
  async telegramMessages(
    @common.Req() request: Request
  ): Promise<TelegramMessage[]> {
    const args = plainToClass(TelegramMessageFindManyArgs, request.query);
    return this.service.telegramMessages({
      ...args,
      select: {
        createdAt: true,
        id: true,
        messageText: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TelegramMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async telegramMessage(
    @common.Param() params: TelegramMessageWhereUniqueInput
  ): Promise<TelegramMessage | null> {
    const result = await this.service.telegramMessage({
      where: params,
      select: {
        createdAt: true,
        id: true,
        messageText: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TelegramMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTelegramMessage(
    @common.Param() params: TelegramMessageWhereUniqueInput,
    @common.Body() data: TelegramMessageUpdateInput
  ): Promise<TelegramMessage | null> {
    try {
      return await this.service.updateTelegramMessage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          messageText: true,
          timestamp: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TelegramMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTelegramMessage(
    @common.Param() params: TelegramMessageWhereUniqueInput
  ): Promise<TelegramMessage | null> {
    try {
      return await this.service.deleteTelegramMessage({
        where: params,
        select: {
          createdAt: true,
          id: true,
          messageText: true,
          timestamp: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
